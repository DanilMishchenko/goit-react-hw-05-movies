{"version":3,"file":"static/js/movies-page.64ac4bac.chunk.js","mappings":"yMAEaA,E,QAAOC,GAAAA,GAAH,6oB,mBCIJC,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACL,EAAD,UACGG,EAAOG,KAAI,SAAAC,GACV,IAAMC,EAAMD,EAAME,YAAN,UACLC,EAAAA,IADK,OACoBH,EAAME,aAClC,+YACJ,OACE,yBACE,SAAC,KAAD,CACEE,GAAE,kBAAaJ,EAAMK,IACrBC,MAAO,CACLC,KAAMV,GAHV,UAME,4BACE,gBAAKW,IAAKP,EAAKQ,IAAKT,EAAMU,SAC1B,uBAAIV,EAAMU,SACV,uCAAeV,EAAMW,sBAVlBX,EAAMK,W,mECbZO,E,QAAUlB,GAAAA,GAAH,2F,8KCAPmB,EAAYnB,EAAAA,GAAAA,IAAH,qHAOToB,EAAapB,EAAAA,GAAAA,KAAH,wPAUVqB,EAAerB,EAAAA,GAAAA,OAAH,2WAiBZsB,EAActB,EAAAA,GAAAA,MAAH,0H,SCzBXuB,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAEMC,ECKK,eAACC,EAAD,uDAAQ,GAAR,OACXC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACtB,EAAIuB,GAWvD,OAREvB,IAFFuB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,OAGP,IDlBmBG,CAAO,GAYvBC,EAAY,WAChBX,EAAU,KAGZ,OACE,SAACR,EAAD,WACE,UAACC,EAAD,CAAYmB,aAAa,MAAMf,SAZd,SAAAgB,GACnBA,EAAEC,iBACFjB,EAASE,GACTY,KASE,WACE,SAAChB,EAAD,CACEoB,KAAK,SACLC,KAAK,SACLC,MAAOlB,EACPf,GAAIiB,EACJiB,SAtBa,SAAAL,GACnBb,EAAUa,EAAEM,OAAOF,QAsBbG,YAAY,mBAEd,SAAC1B,EAAD,CAAcqB,KAAK,SAAnB,0B,mBEvCKM,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5B,OAAO,SAAC,IAAD,UAAUA,KCKJ,SAASC,IACtB,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4B5B,EAAAA,EAAAA,UAAS,IAArC,eAAOvB,EAAP,KAAeoD,EAAf,KACA,GAA8B7B,EAAAA,EAAAA,WAAS,GAAvC,eAAO8B,EAAP,KAAgBC,EAAhB,KACMC,EAAQL,EAAaM,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAY,mCAAG,2FACnBJ,GAAW,GADQ,mBAGSK,EAAAA,EAAAA,IAAoBJ,GAH7B,OAGXK,EAHW,OAIjBR,EAAUQ,EAAYC,SAJL,gDAMjBC,QAAQC,IAAR,MANiB,yBAQjBT,GAAW,GARM,4EAAH,qDAYlBI,OACC,CAACH,IAMJ,OACE,iCACE,SAAClC,EAAD,CAAWC,SANM,SAAAoB,GACnBS,EAAgB,CAAEI,MAAM,GAAD,OAAKb,QAMzBW,IAAW,SAACW,EAAA,EAAD,IACO,IAAlBhE,EAAOiE,SAAgB,UAACnB,EAAD,sBAAsBS,KAC3B,IAAlBvD,EAAOiE,SAAgB,SAAClE,EAAA,EAAD,CAAYC,OAAQA","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/PageHeading/PageHeading.styled.js","components/SearchBar/SearchBar.styled.js","components/SearchBar/SearchBar.jsx","../node_modules/nanoid/index.browser.js","components/PageHeading/PageHeading.jsx","views/MoviesPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n\n  li {\n    width: calc((100% - 120px) / 4);\n    overflow: hidden;\n    margin-right: 40px;\n    margin-bottom: 40px;\n    border-radius: 10px;\n    background-color: #1d80fb;\n    box-shadow: 0 5px 10px 1px rgb(0 0 0 / 40%);\n    transition: 250ms linear;\n\n    &:hover {\n      transform: scale(1.05);\n    }\n    :nth-child(4n) {\n      margin-right: 0;\n    }\n\n    div {\n      padding-bottom: 16px;\n      color: white;\n      text-align: center;\n    }\n\n    p {\n      margin: 8px 0;\n      font-weight: 600;\n      font-size: 16px;\n      letter-spacing: 0.03em;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { List } from './MoviesList.styled';\n\nimport * as moviesApi from 'services/moviesApi';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <List>\n      {movies.map(movie => {\n        const img = movie.poster_path\n          ? `${moviesApi.BASE_URL_IMG}${movie.poster_path}`\n          : 'https://thumbs.dreamstime.com/b/%D0%BE%D1%82%D1%81%D1%83%D1%82%D1%81%D1%82%D0%B2%D0%B8%D0%B5-%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%BD%D0%BE%D0%B3%D0%BE-%D0%B7%D0%BD%D0%B0%D1%87%D0%BE%D0%BA-%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BD%D0%B5%D1%82-%D0%B7%D0%BD%D0%B0%D1%87%D0%BA%D0%B0-%D0%B4%D0%BB%D1%8F-%D0%B2%D0%B5%D0%B1-%D1%83%D0%B7%D0%BB%D0%BE%D0%B2-177641087.jpg';\n        return (\n          <li key={movie.id}>\n            <Link\n              to={`/movies/${movie.id}`}\n              state={{\n                from: location,\n              }}\n            >\n              <div>\n                <img src={img} alt={movie.title} />\n                <p>{movie.title}</p>\n                <span>Rating: {movie.release_date}</span>\n              </div>\n            </Link>\n          </li>\n        );\n      })}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object.isRequired),\n};\n","import styled from 'styled-components';\n\nexport const Heading = styled.h1`\n  text-align: center;\n  margin-bottom: 24px;\n  color: #0804f3;\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 12px 24px;\n  margin-bottom: 16px;\n`;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  width: 100%;\n  max-width: 600px;\n  border-radius: 24px;\n  overflow: hidden;\n  box-shadow: rgb(0 0 0 / 20%) 0px 2px 4px -1px,\n    rgb(0 0 0 / 14%) 0px 4px 5px 0px, rgb(0 0 0 / 12%) 0px 1px 10px 0px;\n`;\n\nexport const SearchButton = styled.button`\n  width: 96px;\n  height: 32px;\n  border: none;\n  border-radius: 24px;\n  color: white;\n  background-image: linear-gradient(to right, #1d80fb, #cc50ff);\n  background-size: 200% 100%;\n  transition: all 750ms ease-in-out;\n  cursor: pointer;\n\n  :hover {\n    background-position: 100% 0;\n    transition: all 750ms ease-in-out;\n  }\n`;\n\nexport const SearchInput = styled.input`\n  width: 100%;\n  outline: none;\n  border: none;\n  padding-left: 16px;\n  padding-right: 16px;\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nimport {\n  Container,\n  SearchForm,\n  SearchButton,\n  SearchInput,\n} from './SearchBar.styled';\n\nexport const SearchBar = ({ onSubmit }) => {\n  const [search, setSearch] = useState('');\n\n  const searchInputId = nanoid(4);\n\n  const handleChange = e => {\n    setSearch(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(search);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setSearch('');\n  };\n\n  return (\n    <Container>\n      <SearchForm autoComplete=\"off\" onSubmit={handleSubmit}>\n        <SearchInput\n          type=\"search\"\n          name=\"search\"\n          value={search}\n          id={searchInputId}\n          onChange={handleChange}\n          placeholder=\"Search movies\"\n        />\n        <SearchButton type=\"submit\">Search</SearchButton>\n      </SearchForm>\n    </Container>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { Heading } from 'components/PageHeading/PageHeading.styled';\n\nexport const PageHeading = ({ children }) => {\n  return <Heading>{children}</Heading>;\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { searchMoviesByQuery } from 'services/moviesApi';\nimport { SearchBar } from 'components/SearchBar/SearchBar';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { PageHeading } from 'components/PageHeading/PageHeading';\n\nexport default function MoviesPage() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) return;\n    const searchMovies = async () => {\n      setLoading(true);\n      try {\n        const foundMovies = await searchMoviesByQuery(query);\n        setMovies(foundMovies.results);\n      } catch (err) {\n        console.log(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    searchMovies();\n  }, [query]);\n\n  const handleSubmit = value => {\n    setSearchParams({ query: `${value}` });\n  };\n\n  return (\n    <>\n      <SearchBar onSubmit={handleSubmit} />\n      {loading && <Loader />}\n      {movies.length !== 0 && <PageHeading>Search: {query}</PageHeading>}\n      {movies.length !== 0 && <MoviesList movies={movies} />}\n    </>\n  );\n}\n"],"names":["List","styled","MoviesList","movies","location","useLocation","map","movie","img","poster_path","moviesApi","to","id","state","from","src","alt","title","release_date","Heading","Container","SearchForm","SearchButton","SearchInput","SearchBar","onSubmit","useState","search","setSearch","searchInputId","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","resetForm","autoComplete","e","preventDefault","type","name","value","onChange","target","placeholder","PageHeading","children","MoviesPage","useSearchParams","searchParams","setSearchParams","setMovies","loading","setLoading","query","get","useEffect","searchMovies","searchMoviesByQuery","foundMovies","results","console","log","Loader","length"],"sourceRoot":""}